# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Address implements Node {
  id: ID!
  title: String!
  lat: Float!
  lon: Float!
  violationCounts(where: ViolationCountWhereInput, orderBy: ViolationCountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ViolationCount!]
}

type ViolationCount implements Node {
  id: ID!
  address(where: AddressWhereInput): Address!
  year: Int!
  month: Int!
  count: Int!
}


#
# Other Types
#

"""
A connection to a list of items.
"""
type AddressConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [AddressEdge]!
  aggregate: AggregateAddress!
}

input AddressCreateInput {
  title: String!
  lat: Float!
  lon: Float!
  violationCounts: ViolationCountCreateManyWithoutAddressInput
}

input AddressCreateOneWithoutViolationCountsInput {
  create: AddressCreateWithoutViolationCountsInput
  connect: AddressWhereUniqueInput
}

input AddressCreateWithoutViolationCountsInput {
  title: String!
  lat: Float!
  lon: Float!
}

"""
An edge in a connection.
"""
type AddressEdge {
  """
  The item at the end of the edge.
  """
  node: Address!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum AddressOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  lat_ASC
  lat_DESC
  lon_ASC
  lon_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AddressPreviousValues {
  id: ID!
  title: String!
  lat: Float!
  lon: Float!
}

type AddressSubscriptionPayload {
  mutation: MutationType!
  node: Address
  updatedFields: [String!]
  previousValues: AddressPreviousValues
}

input AddressSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [AddressSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [AddressSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AddressWhereInput
}

input AddressUpdateInput {
  title: String
  lat: Float
  lon: Float
  violationCounts: ViolationCountUpdateManyWithoutAddressInput
}

input AddressUpdateOneWithoutViolationCountsInput {
  create: AddressCreateWithoutViolationCountsInput
  connect: AddressWhereUniqueInput
  delete: Boolean
  update: AddressUpdateWithoutViolationCountsDataInput
  upsert: AddressUpsertWithoutViolationCountsInput
}

input AddressUpdateWithoutViolationCountsDataInput {
  title: String
  lat: Float
  lon: Float
}

input AddressUpsertWithoutViolationCountsInput {
  update: AddressUpdateWithoutViolationCountsDataInput!
  create: AddressCreateWithoutViolationCountsInput!
}

input AddressWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [AddressWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [AddressWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  title: String
  """
  All values that are not equal to given value.
  """
  title_not: String
  """
  All values that are contained in given list.
  """
  title_in: [String!]
  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]
  """
  All values less than the given value.
  """
  title_lt: String
  """
  All values less than or equal the given value.
  """
  title_lte: String
  """
  All values greater than the given value.
  """
  title_gt: String
  """
  All values greater than or equal the given value.
  """
  title_gte: String
  """
  All values containing the given string.
  """
  title_contains: String
  """
  All values not containing the given string.
  """
  title_not_contains: String
  """
  All values starting with the given string.
  """
  title_starts_with: String
  """
  All values not starting with the given string.
  """
  title_not_starts_with: String
  """
  All values ending with the given string.
  """
  title_ends_with: String
  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  lat: Float
  """
  All values that are not equal to given value.
  """
  lat_not: Float
  """
  All values that are contained in given list.
  """
  lat_in: [Float!]
  """
  All values that are not contained in given list.
  """
  lat_not_in: [Float!]
  """
  All values less than the given value.
  """
  lat_lt: Float
  """
  All values less than or equal the given value.
  """
  lat_lte: Float
  """
  All values greater than the given value.
  """
  lat_gt: Float
  """
  All values greater than or equal the given value.
  """
  lat_gte: Float
  lon: Float
  """
  All values that are not equal to given value.
  """
  lon_not: Float
  """
  All values that are contained in given list.
  """
  lon_in: [Float!]
  """
  All values that are not contained in given list.
  """
  lon_not_in: [Float!]
  """
  All values less than the given value.
  """
  lon_lt: Float
  """
  All values less than or equal the given value.
  """
  lon_lte: Float
  """
  All values greater than the given value.
  """
  lon_gt: Float
  """
  All values greater than or equal the given value.
  """
  lon_gte: Float
  violationCounts_every: ViolationCountWhereInput
  violationCounts_some: ViolationCountWhereInput
  violationCounts_none: ViolationCountWhereInput
}

input AddressWhereUniqueInput {
  id: ID
}

type AggregateAddress {
  count: Int!
}

type AggregateViolationCount {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createAddress(data: AddressCreateInput!): Address!
  createViolationCount(data: ViolationCountCreateInput!): ViolationCount!
  updateAddress(data: AddressUpdateInput!, where: AddressWhereUniqueInput!): Address
  updateViolationCount(data: ViolationCountUpdateInput!, where: ViolationCountWhereUniqueInput!): ViolationCount
  deleteAddress(where: AddressWhereUniqueInput!): Address
  deleteViolationCount(where: ViolationCountWhereUniqueInput!): ViolationCount
  upsertAddress(where: AddressWhereUniqueInput!, create: AddressCreateInput!, update: AddressUpdateInput!): Address!
  upsertViolationCount(where: ViolationCountWhereUniqueInput!, create: ViolationCountCreateInput!, update: ViolationCountUpdateInput!): ViolationCount!
  updateManyAddresses(data: AddressUpdateInput!, where: AddressWhereInput): BatchPayload!
  updateManyViolationCounts(data: ViolationCountUpdateInput!, where: ViolationCountWhereInput): BatchPayload!
  deleteManyAddresses(where: AddressWhereInput): BatchPayload!
  deleteManyViolationCounts(where: ViolationCountWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Query {
  addresses(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Address]!
  violationCounts(where: ViolationCountWhereInput, orderBy: ViolationCountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ViolationCount]!
  address(where: AddressWhereUniqueInput!): Address
  violationCount(where: ViolationCountWhereUniqueInput!): ViolationCount
  addressesConnection(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AddressConnection!
  violationCountsConnection(where: ViolationCountWhereInput, orderBy: ViolationCountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ViolationCountConnection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

type Subscription {
  address(where: AddressSubscriptionWhereInput): AddressSubscriptionPayload
  violationCount(where: ViolationCountSubscriptionWhereInput): ViolationCountSubscriptionPayload
}

"""
A connection to a list of items.
"""
type ViolationCountConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [ViolationCountEdge]!
  aggregate: AggregateViolationCount!
}

input ViolationCountCreateInput {
  year: Int!
  month: Int!
  count: Int!
  address: AddressCreateOneWithoutViolationCountsInput!
}

input ViolationCountCreateManyWithoutAddressInput {
  create: [ViolationCountCreateWithoutAddressInput!]
  connect: [ViolationCountWhereUniqueInput!]
}

input ViolationCountCreateWithoutAddressInput {
  year: Int!
  month: Int!
  count: Int!
}

"""
An edge in a connection.
"""
type ViolationCountEdge {
  """
  The item at the end of the edge.
  """
  node: ViolationCount!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ViolationCountOrderByInput {
  id_ASC
  id_DESC
  year_ASC
  year_DESC
  month_ASC
  month_DESC
  count_ASC
  count_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ViolationCountPreviousValues {
  id: ID!
  year: Int!
  month: Int!
  count: Int!
}

type ViolationCountSubscriptionPayload {
  mutation: MutationType!
  node: ViolationCount
  updatedFields: [String!]
  previousValues: ViolationCountPreviousValues
}

input ViolationCountSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ViolationCountSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ViolationCountSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ViolationCountWhereInput
}

input ViolationCountUpdateInput {
  year: Int
  month: Int
  count: Int
  address: AddressUpdateOneWithoutViolationCountsInput
}

input ViolationCountUpdateManyWithoutAddressInput {
  create: [ViolationCountCreateWithoutAddressInput!]
  connect: [ViolationCountWhereUniqueInput!]
  disconnect: [ViolationCountWhereUniqueInput!]
  delete: [ViolationCountWhereUniqueInput!]
  update: [ViolationCountUpdateWithWhereUniqueWithoutAddressInput!]
  upsert: [ViolationCountUpsertWithWhereUniqueWithoutAddressInput!]
}

input ViolationCountUpdateWithoutAddressDataInput {
  year: Int
  month: Int
  count: Int
}

input ViolationCountUpdateWithWhereUniqueWithoutAddressInput {
  where: ViolationCountWhereUniqueInput!
  data: ViolationCountUpdateWithoutAddressDataInput!
}

input ViolationCountUpsertWithWhereUniqueWithoutAddressInput {
  where: ViolationCountWhereUniqueInput!
  update: ViolationCountUpdateWithoutAddressDataInput!
  create: ViolationCountCreateWithoutAddressInput!
}

input ViolationCountWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ViolationCountWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ViolationCountWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  year: Int
  """
  All values that are not equal to given value.
  """
  year_not: Int
  """
  All values that are contained in given list.
  """
  year_in: [Int!]
  """
  All values that are not contained in given list.
  """
  year_not_in: [Int!]
  """
  All values less than the given value.
  """
  year_lt: Int
  """
  All values less than or equal the given value.
  """
  year_lte: Int
  """
  All values greater than the given value.
  """
  year_gt: Int
  """
  All values greater than or equal the given value.
  """
  year_gte: Int
  month: Int
  """
  All values that are not equal to given value.
  """
  month_not: Int
  """
  All values that are contained in given list.
  """
  month_in: [Int!]
  """
  All values that are not contained in given list.
  """
  month_not_in: [Int!]
  """
  All values less than the given value.
  """
  month_lt: Int
  """
  All values less than or equal the given value.
  """
  month_lte: Int
  """
  All values greater than the given value.
  """
  month_gt: Int
  """
  All values greater than or equal the given value.
  """
  month_gte: Int
  count: Int
  """
  All values that are not equal to given value.
  """
  count_not: Int
  """
  All values that are contained in given list.
  """
  count_in: [Int!]
  """
  All values that are not contained in given list.
  """
  count_not_in: [Int!]
  """
  All values less than the given value.
  """
  count_lt: Int
  """
  All values less than or equal the given value.
  """
  count_lte: Int
  """
  All values greater than the given value.
  """
  count_gt: Int
  """
  All values greater than or equal the given value.
  """
  count_gte: Int
  address: AddressWhereInput
}

input ViolationCountWhereUniqueInput {
  id: ID
}
